{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Basu\\\\Documents\\\\GitHub\\\\grootmartFrontend\\\\src\\\\context\\\\product\\\\ProductState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport ProductContext from './productContext';\nimport ProductReducer from './productReducer';\nimport { commerce } from '../../lib/commerce';\nimport { FETCH_PRODUCTS, FETCH_CART, ADD_PRODUCT, UPDATE_CART, REMOVE_ITEM, EMPTY_CART, REFRESH_CART } from '../Types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ProductState = props => {\n  _s();\n\n  const initialState = {\n    products: [],\n    cart: {}\n  }; // const [products, setProducts] = useState([])\n\n  const [state, dispatch] = useReducer(ProductReducer, initialState); // Fetch All Products\n\n  const fetchProducts = async () => {\n    const {\n      data\n    } = await commerce.products.list();\n    dispatch({\n      type: FETCH_PRODUCTS,\n      payload: data\n    });\n  }; // Fetch All Items in Cart\n\n\n  const fetchCart = async () => {\n    const cartData = await commerce.cart.retrieve();\n    dispatch({\n      type: FETCH_CART,\n      payload: cartData\n    });\n  }; // Add Products to Cart\n\n\n  const addToCart = async (productId, quantity) => {\n    const item = await commerce.cart.add(productId, quantity);\n    dispatch({\n      type: ADD_PRODUCT,\n      payload: item.cart\n    });\n  }; // Update Cart Quantity\n\n\n  const handleUpdateCartQty = async (lineItemId, quantity) => {\n    const response = await commerce.cart.update(lineItemId, {\n      quantity\n    });\n    dispatch({\n      type: UPDATE_CART,\n      payload: response.cart\n    });\n  }; // Remove Items From Cart\n\n\n  const handleRemoveFromCart = async lineItemId => {\n    const response = await commerce.cart.remove(lineItemId);\n    dispatch({\n      type: REMOVE_ITEM,\n      payload: response.cart\n    });\n  }; // Empty the Cart\n\n\n  const handleEmptyCart = async () => {\n    const response = await commerce.cart.empty();\n    dispatch({\n      type: EMPTY_CART,\n      payload: response.cart\n    });\n  }; // Refresh the Cart\n\n\n  const refreshCart = async () => {\n    const newCart = await commerce.cart.refresh();\n    dispatch({\n      type: REFRESH_CART,\n      payload: newCart\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ProductContext.Provider, {\n    value: {\n      products: state.products,\n      cart: state.cart,\n      fetchProducts,\n      fetchCart,\n      addToCart,\n      handleUpdateCartQty,\n      handleRemoveFromCart,\n      handleEmptyCart,\n      refreshCart\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProductState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = ProductState;\nexport default ProductState;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductState\");","map":{"version":3,"sources":["C:/Users/Basu/Documents/GitHub/grootmartFrontend/src/context/product/ProductState.js"],"names":["React","useReducer","ProductContext","ProductReducer","commerce","FETCH_PRODUCTS","FETCH_CART","ADD_PRODUCT","UPDATE_CART","REMOVE_ITEM","EMPTY_CART","REFRESH_CART","ProductState","props","initialState","products","cart","state","dispatch","fetchProducts","data","list","type","payload","fetchCart","cartData","retrieve","addToCart","productId","quantity","item","add","handleUpdateCartQty","lineItemId","response","update","handleRemoveFromCart","remove","handleEmptyCart","empty","refreshCart","newCart","refresh","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\nimport ProductContext from './productContext';\r\nimport ProductReducer from './productReducer';\r\nimport { commerce } from '../../lib/commerce';\r\nimport {\r\n  FETCH_PRODUCTS,\r\n  FETCH_CART,\r\n  ADD_PRODUCT,\r\n  UPDATE_CART,\r\n  REMOVE_ITEM,\r\n  EMPTY_CART,\r\n  REFRESH_CART,\r\n} from '../Types';\r\n\r\nconst ProductState = (props) => {\r\n  const initialState = {\r\n    products: [],\r\n    cart: {},\r\n  };\r\n\r\n  // const [products, setProducts] = useState([])\r\n\r\n  const [state, dispatch] = useReducer(ProductReducer, initialState);\r\n\r\n  // Fetch All Products\r\n  const fetchProducts = async () => {\r\n    const { data } = await commerce.products.list();\r\n\r\n    dispatch({\r\n      type: FETCH_PRODUCTS,\r\n      payload: data,\r\n    });\r\n  };\r\n\r\n  // Fetch All Items in Cart\r\n  const fetchCart = async () => {\r\n    const cartData = await commerce.cart.retrieve();\r\n\r\n    dispatch({\r\n      type: FETCH_CART,\r\n      payload: cartData,\r\n    });\r\n  };\r\n\r\n  // Add Products to Cart\r\n  const addToCart = async (productId, quantity) => {\r\n    const item = await commerce.cart.add(productId, quantity);\r\n\r\n    dispatch({\r\n      type: ADD_PRODUCT,\r\n      payload: item.cart,\r\n    });\r\n  };\r\n\r\n  // Update Cart Quantity\r\n  const handleUpdateCartQty = async (lineItemId, quantity) => {\r\n    const response = await commerce.cart.update(lineItemId, { quantity });\r\n\r\n    dispatch({\r\n      type: UPDATE_CART,\r\n      payload: response.cart,\r\n    });\r\n  };\r\n\r\n  // Remove Items From Cart\r\n  const handleRemoveFromCart = async (lineItemId) => {\r\n    const response = await commerce.cart.remove(lineItemId);\r\n\r\n    dispatch({\r\n      type: REMOVE_ITEM,\r\n      payload: response.cart,\r\n    });\r\n  };\r\n\r\n  // Empty the Cart\r\n  const handleEmptyCart = async () => {\r\n    const response = await commerce.cart.empty();\r\n\r\n    dispatch({\r\n      type: EMPTY_CART,\r\n      payload: response.cart,\r\n    });\r\n  };\r\n\r\n  // Refresh the Cart\r\n  const refreshCart = async () => {\r\n    const newCart = await commerce.cart.refresh();\r\n\r\n    dispatch({\r\n      type: REFRESH_CART,\r\n      payload: newCart,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <ProductContext.Provider\r\n      value={{\r\n        products: state.products,\r\n        cart: state.cart,\r\n        fetchProducts,\r\n        fetchCart,\r\n        addToCart,\r\n        handleUpdateCartQty,\r\n        handleRemoveFromCart,\r\n        handleEmptyCart,\r\n        refreshCart,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </ProductContext.Provider>\r\n  );\r\n};\r\n\r\nexport default ProductState;\r\n"]},"metadata":{},"sourceType":"module"}